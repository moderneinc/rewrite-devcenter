/*
 * Copyright 2025 the original author or authors.
 * <p>
 * Licensed under the Moderne Source Available License (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * https://docs.moderne.io/licensing/moderne-source-available-license
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.moderne.devcenter;

import io.moderne.devcenter.internal.DataTableRowWatcher;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Value;
import org.jspecify.annotations.Nullable;
import org.openrewrite.*;
import org.openrewrite.gradle.IsBuildGradle;
import org.openrewrite.java.dependencies.DependencyVulnerabilityCheckBase;
import org.openrewrite.java.dependencies.DependencyVulnerabilityCheckBase.UpgradeDelta;
import org.openrewrite.java.dependencies.internal.VersionParser;
import org.openrewrite.java.dependencies.table.VulnerabilityReport;
import org.openrewrite.maven.MavenDownloadingException;
import org.openrewrite.maven.MavenDownloadingExceptions;
import org.openrewrite.maven.search.FindMavenProject;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

import static io.moderne.devcenter.DependencyVulnerabilityCheck.UpgradeDeltaMeasure.NotFixable;
import static java.util.Collections.emptyList;
import static java.util.stream.Collectors.toList;

@Value
@EqualsAndHashCode(callSuper = false)
public class DependencyVulnerabilityCheck extends UpgradeMigrationCard {

    @Option(displayName = "Fixable only",
            description = "Only report vulnerabilities that have a known fix available. By default this is true.",
            required = false)
    @Nullable
    Boolean fixableOnly;

    @Option(displayName = "Add transitive",
            description = "Whether to include transitive dependencies in the vulnerability check. By default this is true.",
            required = false)
    @Nullable
    Boolean addTransitive;

    @Option(displayName = "Measure",
            description = "Choose to report Severity or UpgradeDelta.",
            valid = {"Severity", "UpgradeDelta"})
    String measure;

    @Override
    public String getDisplayName() {
        return "Vulnerabilities status";
    }

    @Override
    public String getInstanceName() {
        return "Vulnerable dependencies";
    }

    @Override
    public String getDescription() {
        return "Determine the current state of a repository relative to its vulnerabilities.";
    }

    @Override
    public TreeVisitor<?, ExecutionContext> getVisitor() {
        org.openrewrite.java.dependencies.DependencyVulnerabilityCheck scan = new org.openrewrite.java.dependencies.DependencyVulnerabilityCheck("runtime", addTransitive == null || addTransitive, UpgradeDelta.major);
        AtomicReference<DependencyVulnerabilityCheckBase.@Nullable Accumulator> accumulator = new AtomicReference<>();
        return Preconditions.check(Preconditions.or(new IsBuildGradle<>(), new FindMavenProject().getVisitor()), new TreeVisitor<Tree, ExecutionContext>() {
            @Override
            public Tree preVisit(Tree tree, ExecutionContext ctx) {
                stopAfterPreVisit();
                if (accumulator.get() == null) {
                    accumulator.set(scan.getInitialValue(ctx));
                }
                try {
                    scan.getScanner(accumulator.get()).visitNonNull(tree, ctx);
                } catch (Exception e) {
                    if (!((e.getCause() instanceof MavenDownloadingException) || (e.getCause() instanceof MavenDownloadingExceptions))) {
                        throw e;
                    }
                    // ignore the MavenDownloadingException(s) that might occur in the scanning phase as the RecipeRunCycle.scanSources also does this when such an error occurs during scanning phase in a ScanningRecipe.
                }

                DataTableRowWatcher<VulnerabilityReport.Row> dataTableWatcher = new DataTableRowWatcher<>(scan.getVulnerabilityReport(), ctx);
                dataTableWatcher.start();
                scan.generate(accumulator.get(), ctx);

                List<VulnerabilityReport.Row> vulnerableDependencies = dataTableWatcher.stop();

                if (vulnerableDependencies.isEmpty()) {
                    upgradesAndMigrations.insertRow(ctx, DependencyVulnerabilityCheck.this, UpgradeDeltaMeasure.Completed, "No vulnerabilities found");
                }

                for (VulnerabilityReport.Row row : vulnerableDependencies) {
                    if ("UpgradeDelta".equalsIgnoreCase(measure)) {
                        //potential improvement: if there is no fixedVersion, but a last affected version, try to find the next version after the lastAffected version.
                        if (row.getFixedVersion() == null) {
                            if ((fixableOnly == null || fixableOnly)) {
                                upgradesAndMigrations.insertRow(ctx, DependencyVulnerabilityCheck.this, UpgradeDeltaMeasure.Completed, "No fix available for at least 1 vulnerability.");
                            } else {
                                upgradesAndMigrations.insertRow(ctx, DependencyVulnerabilityCheck.this, NotFixable, "No fix available for at least 1 vulnerability.");
                            }
                        } else {
                            upgradesAndMigrations.insertRow(ctx, DependencyVulnerabilityCheck.this, UpgradeDeltaMeasure.ofVersions(row.getVersion(), row.getFixedVersion()), "Vulnerabilities found.");
                        }
                    } else if ("Severity".equalsIgnoreCase(measure)) {
                        if ((fixableOnly == null || fixableOnly) && row.getFixedVersion() == null) {
                            //potential improvement: if there is no fixedVersion, but a last affected version, try to find the next version after the lastAffected version. If such a version exists, do not ignore this vulnerability.
                            continue;
                        }
                        upgradesAndMigrations.insertRow(ctx, DependencyVulnerabilityCheck.this, SeverityMeasure.ofSeverity(row.getSeverity()), "Vulnerabilities found.");
                    }
                }

                return tree;
            }
        });
    }

    @Override
    public String getFixRecipeId() {
        return "org.openrewrite.java.dependencies.DependencyVulnerabilityCheck";
    }

    @Override
    public List<DevCenterMeasure> getMeasures() {
        if ("UpgradeDelta".equalsIgnoreCase(measure)) {
            if (fixableOnly == null || fixableOnly) {
                return Arrays.stream(UpgradeDeltaMeasure.values()).filter(measure -> NotFixable != measure).collect(toList());
            }
            return Arrays.asList(UpgradeDeltaMeasure.values());
        }
        if ("Severity".equalsIgnoreCase(measure)) {
            return Arrays.asList(SeverityMeasure.values());
        }
        return emptyList();
    }

    @RequiredArgsConstructor
    @Getter
    public enum UpgradeDeltaMeasure implements DevCenterMeasure {
        Major("Major", "Some dependencies require a major version bump."),
        Minor("Minor", "Some dependencies require a minor version bump."),
        Patch("Patch", "Some dependencies require a patch version bump."),
        NotFixable("No fix available", "No fix is available for the vulnerabilities that are present"),
        Completed("No vulnerabilities", "No vulnerabilities found.");

        private static final VersionParser parser = new VersionParser();

        private final String name;
        private final String description;

        public static UpgradeDeltaMeasure ofVersions(String currentVersion, String newVersion) {
            Long[] currentNumericParts = parser.transform(currentVersion).getNumericParts();
            Long[] newNumericParts = parser.transform(newVersion).getNumericParts();
            for (int i = 0; i < currentNumericParts.length && i < newNumericParts.length; i++) {
                if ((currentNumericParts[i] == null && newNumericParts[i] != null) || (currentNumericParts[i] != null && !currentNumericParts[i].equals(newNumericParts[i]))) {
                    switch (i) {
                        case 0:
                            return UpgradeDeltaMeasure.Major;
                        case 1:
                            return UpgradeDeltaMeasure.Minor;
                        default:
                            return UpgradeDeltaMeasure.Patch;
                    }
                }
            }
            return Patch; // New version is longer than current version
        }
    }

    @RequiredArgsConstructor
    @Getter
    public enum SeverityMeasure implements DevCenterMeasure {
        Critical("Critical severity vulnerabilities found."),
        High("High severity vulnerabilities found."),
        Moderate("Moderate severity vulnerabilities found."),
        Low("Low severity vulnerabilities found."),
        Completed("No fixable vulnerabilities found.");

        @Override
        public String getName() {
            return name();
        }

        private final String description;

        public static SeverityMeasure ofSeverity(String severity) {
            return Arrays.stream(SeverityMeasure.values())
                    .filter(measure -> measure.getName().equalsIgnoreCase(severity))
                    .findFirst()
                    .orElse(Critical); // Should never happen -> assume the worst
        }
    }
}
