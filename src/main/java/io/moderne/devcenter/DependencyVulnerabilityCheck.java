/*
 * Copyright 2025 the original author or authors.
 * <p>
 * Licensed under the Moderne Source Available License (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * https://docs.moderne.io/licensing/moderne-source-available-license
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.moderne.devcenter;

import io.moderne.devcenter.internal.DataTableRowWatcher;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Value;
import org.intellij.lang.annotations.Language;
import org.jspecify.annotations.Nullable;
import org.openrewrite.*;
import org.openrewrite.gradle.IsBuildGradle;
import org.openrewrite.java.dependencies.DependencyVulnerabilityCheckBase;
import org.openrewrite.java.dependencies.DependencyVulnerabilityCheckBase.UpgradeDelta;
import org.openrewrite.java.dependencies.internal.Version;
import org.openrewrite.java.dependencies.internal.VersionParser;
import org.openrewrite.java.dependencies.table.VulnerabilityReport;
import org.openrewrite.maven.search.FindMavenProject;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

@Value
@EqualsAndHashCode(callSuper = false)
public class DependencyVulnerabilityCheck extends UpgradeMigrationCard {

    @Option(displayName = "Fixable only",
            description = "Only report vulnerabilities that have a known fix available. By default this is true.",
            required = false)
    @Nullable
    Boolean fixableOnly;

    @Option(displayName = "Add transitive",
            description = "Whether to include transitive dependencies in the vulnerability check. By default this is true.",
            required = false)
    @Nullable
    Boolean addTransitive;

    @Option(displayName = "Measure",
            description = "Choose to report Severity or UpgradeDelta.",
            valid = {"Severity", "UpgradeDelta"})
    String measure;

    @Override
    public String getDisplayName() {
        return "Vulnerabilities status";
    }

    @Override
    public String getInstanceName() {
        return "Vulnerable dependencies";
    }

    @Override
    public String getDescription() {
        return "Determine the current state of a repository relative to its vulnerabilities.";
    }

    @Override
    public TreeVisitor<?, ExecutionContext> getVisitor() {
        org.openrewrite.java.dependencies.DependencyVulnerabilityCheck scan = new org.openrewrite.java.dependencies.DependencyVulnerabilityCheck("runtime", addTransitive == null || addTransitive, UpgradeDelta.major);
        AtomicReference<DependencyVulnerabilityCheckBase.Accumulator> accumulator = new AtomicReference<>();
        return Preconditions.check(Preconditions.or(new IsBuildGradle<>(), new FindMavenProject().getVisitor()), new TreeVisitor<Tree, ExecutionContext>() {
            @Override
            public Tree preVisit(Tree tree, ExecutionContext ctx) {
                stopAfterPreVisit();
                if (accumulator.get() == null) {
                    accumulator.set(scan.getInitialValue(ctx));
                }
                scan.getScanner(accumulator.get()).visitNonNull(tree, ctx);

                DataTableRowWatcher<VulnerabilityReport.Row> dataTableWatcher = new DataTableRowWatcher<>(scan.getVulnerabilityReport(), ctx);
                dataTableWatcher.start();
                scan.generate(accumulator.get(), ctx);

                List<VulnerabilityReport.Row> vulnerableDependencies = dataTableWatcher.stop();

                if (vulnerableDependencies.isEmpty()) {
                    upgradesAndMigrations.insertRow(ctx, DependencyVulnerabilityCheck.this, UpgradeDeltaMeasure.Completed, "No vulnerabilities found");
                }

                for (VulnerabilityReport.Row row : vulnerableDependencies) {
                    if ((fixableOnly == null || fixableOnly) && row.getFixedVersion() == null) {
                        upgradesAndMigrations.insertRow(ctx, DependencyVulnerabilityCheck.this, UpgradeDeltaMeasure.Completed, "Only vulnerabilities are not fixable.");
                        continue;
                    }
                    if ("UpgradeDelta".equalsIgnoreCase(measure)) {
                        upgradesAndMigrations.insertRow(ctx, DependencyVulnerabilityCheck.this, UpgradeDeltaMeasure.ofVersions(row.getVersion(), row.getFixedVersion()), "Vulnerabilities found.");
                    } else if ("Severity".equalsIgnoreCase(measure)) {
                        upgradesAndMigrations.insertRow(ctx, DependencyVulnerabilityCheck.this, SeverityMeasure.ofSeverity(row.getSeverity()), "Vulnerabilities found.");
                    }
                }

                return tree;
            }
        });
    }

    @Override
    public @Nullable String getFixRecipeId() {
        return "org.openrewrite.java.dependencies.DependencyVulnerabilityCheck";
    }

    @Override
    public List<DevCenterMeasure> getMeasures() {
        if ("UpgradeDelta".equalsIgnoreCase(measure)) {
            return Arrays.asList(UpgradeDeltaMeasure.values());
        } else if ("Severity".equalsIgnoreCase(measure)) {
            return Arrays.asList(SeverityMeasure.values());
        }
        return Collections.emptyList();
    }

    @RequiredArgsConstructor
    @Getter
    public enum UpgradeDeltaMeasure implements DevCenterMeasure {
        Major("Vulnerabilities that require a major version bump found."),
        Minor("Vulnerabilities that require a minor version bump found."),
        Patch("Vulnerabilities that require a patch found."),
        Completed("No fixable vulnerabilities found.");

        private static final VersionParser parser = new VersionParser();

        @Override
        public @Language("markdown") String getName() {
            return name();
        }

        private final @Language("markdown") String description;

        public static UpgradeDeltaMeasure ofVersions(String currentVersion, String newVersion) {
            Version currentParsed = parser.transform(currentVersion);
            Version newParsed = parser.transform(newVersion);
            Long[] currentNumericParts = currentParsed.getNumericParts();
            Long[] newNumericParts = newParsed.getNumericParts();
            if (currentNumericParts.length == newNumericParts.length) {
                for (int i = 0; i < currentNumericParts.length; i++) {
                    if (!currentNumericParts[i].equals(newNumericParts[i])) {
                        switch (i) {
                            case 0: return UpgradeDeltaMeasure.Major;
                            case 1: return UpgradeDeltaMeasure.Minor;
                            case 2: return UpgradeDeltaMeasure.Patch;
                        }
                    }
                }
            }
            return Major; // Should never happen -> assume the worst
        }
    }

    @RequiredArgsConstructor
    @Getter
    public enum SeverityMeasure implements DevCenterMeasure {
        Critical("Critical severity vulnerabilities found."),
        High("High severity vulnerabilities found."),
        Moderate("Moderate severity vulnerabilities found."),
        Low("Low severity vulnerabilities found."),
        Completed("No fixable vulnerabilities found.");

        @Override
        public @Language("markdown") String getName() {
            return name();
        }

        private final @Language("markdown") String description;

        public static SeverityMeasure ofSeverity(String severity) {
            return Arrays.stream(SeverityMeasure.values())
                    .filter(measure -> measure.getName().equalsIgnoreCase(severity))
                    .findFirst()
                    .orElse(Critical); // Should never happen -> assume the worst
        }
    }
}
